%% -*- erlang -*-

[
 {rester,
  [{ssl_options, [
		  {verify,verify_none},
		  {cacertfile, "/home/USER/erlang/robox/priv/cacerts.pem"}
		 ]}]
 },

 {gsms, [{interfaces,
	  [
	   {gsms_0705, 1, [{device,"/dev/ttyUSB2"},
			   {bnumber, "0701234567"},{baud,115200},
			   {reopen_timeout, 5000}]}
	  ]}]},
 
 {robox,
  [
   {queue_dir, "/var/erlang/robox/queue"},
   {spotify,
    [
     {login_url, "https://accounts.spotify.com/api/token"},
     {client_id, "<client-id">},
     {client_secret, "<client-secret>"},
     {api, "https://api.spotify.com/v1"},
     {market, "SE"}
    ]},
   %% generate SMSTO: QR code
   {sms,
    [
     {phone_number, "0701234567"}
    ]},
   %% generate MAILTO: QR code
   {email,
    [
     {address, "joe@robox.com"},
     {subject, "Enqueue"}
    ]},
   %% generate WEBTO: QR code
   {web,
    [
     {address, "local"},
     {root, "/robox"},
     {port, 8080}
    ]},
   %% Configure local Wifi where robox is running, to 
   %% access local url
   {wifi,
    [
     {ssid, "SSID"},
     {password, "password"}
    ]}
  ]
 },

 %% logging setup !!!

 {kernel,
  [
   %% {log_root, "/var/erlang/robox/log"}, %% on target
   {logger_level, info}, %% debug},
   {logger,
    [
     {handler, default, undefined}, %% removed default handler
     {handler, default, logger_disk_log_h,
      #{ level => all,
         config => #{ file => "logs/console.log",
                      type => wrap,
                      max_no_files => 4,
                      max_no_bytes => 1000000
                    } 
       }},
     {handler, error, logger_disk_log_h,
      #{ level => error,
         config => #{ file => "logs/error.log",
                      type => wrap,
                      max_no_files => 4,
                      max_no_bytes => 1000000
                    }
       }},
     {handler, debug_tty, logger_std_h,
      #{ level => debug,
         filter_default => stop,
         filters => [{debug_only,
                      {fun logger_filters:level/2, 
                       {log, eq, debug}}}],
         config => #{ type => standard_io } %% standard_io | standard_error 
       }},
     {handler, debug, logger_disk_log_h,
      #{ level => debug,
         filter_default => stop,
         filters => [{debug_only,
                      {fun logger_filters:level/2, 
                       {log, eq, debug}}}],         config => #{ file => "logs/debug.log",
                      type => wrap,
                      max_no_files => 4,
                      max_no_bytes => 1000000
                    }}
     }

    ]}
  ]}
].
